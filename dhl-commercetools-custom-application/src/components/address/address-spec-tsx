import {
  screen,
  mapResourceAccessToAppliedPermissions,
  type TRenderAppWithReduxOptions,
} from '@commercetools-frontend/application-shell/test-utils';
import userEvent from '@testing-library/user-event';
import { renderApplicationWithRedux } from '../../test-utils';
import { entryPointUriPath, PERMISSIONS } from '../../constants';
import ApplicationRoutes from '../../routes';
import { graphql } from 'msw';
import { setupServer } from 'msw/node';

const renderApp = (options: Partial<TRenderAppWithReduxOptions> = {}) => {
  const route =
    options.route || `/my-project/${entryPointUriPath}/settings/address`;
  renderApplicationWithRedux(<ApplicationRoutes />, {
    route,
    project: {
      allAppliedPermissions: mapResourceAccessToAppliedPermissions([
        PERMISSIONS.View,
      ]),
    },
    ...options,
  });
};

const mockServer = setupServer();
afterEach(() => mockServer.resetHandlers());
beforeAll(() =>
  mockServer.listen({
    onUnhandledRequest: 'error',
  })
);

afterAll(() => mockServer.close());

beforeEach(() => {
  mockServer.use(
    graphql.query('FETCH_SETTINGS', (req, res, ctx) => {
      return res(
        ctx.data({
          customObject: {},
        })
      );
    })
  );
  mockServer.use(
    graphql.query('FetchCustomObjectQuery', (req, res, ctx) => {
      return res(
        ctx.data({
          customObject: {},
        })
      );
    })
  );
});

it('should render address page', async () => {
  renderApp();
  await screen.findByText('Dispatch and return address');
});

/*it('should hide return address', async () => {
  renderApp();
  const user = userEvent.setup();
  expect(document.getElementById('returnAddressMask')).toBeDefined();
  await user.click(screen.getByRole('input'));
  expect(document.getElementById('returnAddressMask')).toBeNull();
});*/
